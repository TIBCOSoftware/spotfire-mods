[{"body":"A step-by-step Tutorial on using Spotfire Mods We will be using Spotfire API and googlecharts to create a basic bar chart.\nThis tutorial will cover the following:\n Initial setup Consuming and visualizing data Selection / marking Theme-ing Controlling the mod using popout menu Export to PDF  Full code of this tutorial project ('js-dev-barchart-googlecharts') as well as the starter project ('js-dev-starter') can be found in the SDK zip.\nThe full version of the example (found in SDK) covers some extra cases that are outside of the scope of this tutorial.\nPrerequisites  A running instance of Spotfire A code editor. It is highly recommended to use Visual Studio Code when developing a mod. The mod example include predefined settings for VS Code that enable a default build task, intellisense in the mod manifest and intellisense in the JavaScript code. node.js installed   1. Initial setup  Copy js-dev-starter project and rename to something relevant, like my-barchart-mod. The starter project has a minimum amount of code for a working mod. Open the folder in a terminal or command line. Run npm install to install dependencies. Run npm run server to start the server. The provided server setup allows us to see live updates when developing a mod. In Spotfire go to Tools \u0026gt; @Create Visialization Mod and connect to the project by following the on-screen steps (Connect to Project \u0026gt; Development server \u0026gt; Connect) You should see some mod metadata on the screen, which means the mod is working.   2. Add google charts library  We will be using this google example Add google chart loader script to index.html  \u0026lt;body\u0026gt;\r\u0026lt;div id=\u0026#34;mod-container\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\r\u0026lt;script id=\u0026#34;spotfire-loader\u0026#34;\u0026gt;var Spotfire=function(e){\u0026#34;use strict\u0026#34;;return e.initialize=function(e){var t=\u0026#34;sfTemp\u0026#34;+1e4*Math.random()+\u0026#34;Cb\u0026#34;,a=window;a[t]=e;var r={subject:\u0026#34;GetUrl\u0026#34;,callbackId:-1,...\u0026lt;/script\u0026gt;\r+ \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;https://www.gstatic.com/charts/loader.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\r \u0026lt;script src=\u0026#34;main.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r Paste full example code into main.js inside render function  async function render(dataView, windowSize, prop) {\r/**\r* Get rows from dataView\r*/\rconst rows = await dataView.getAllRows();\r- /**\r- * Print out to document\r- */\r- const container = document.querySelector(\u0026#34;#mod-container\u0026#34;);\r- container.innerHTML += `windowSize: ${windowSize.width}x${windowSize.height}\u0026lt;br/\u0026gt;`;\r- container.innerHTML += `should render: ${rows.length} rows\u0026lt;br/\u0026gt;`;\r- container.innerHTML += `${prop.name}: ${prop.value}`;\r+ google.charts.load(\u0026#34;current\u0026#34;, { packages: [\u0026#34;corechart\u0026#34;] });\r+ google.charts.setOnLoadCallback(drawChart);\r+ function drawChart() {\r+ var data = google.visualization.arrayToDataTable([\r+ [\u0026#34;Element\u0026#34;, \u0026#34;Density\u0026#34;, { role: \u0026#34;style\u0026#34; }],\r+ [\u0026#34;Copper\u0026#34;, 8.94, \u0026#34;#b87333\u0026#34;],\r+ [\u0026#34;Silver\u0026#34;, 10.49, \u0026#34;silver\u0026#34;],\r+ [\u0026#34;Gold\u0026#34;, 19.3, \u0026#34;gold\u0026#34;],\r+ [\u0026#34;Platinum\u0026#34;, 21.45, \u0026#34;color: #e5e4e2\u0026#34;]\r+ ]);\r+\r+ var view = new google.visualization.DataView(data);\r+ view.setColumns([0, 1, { calc: \u0026#34;stringify\u0026#34;, sourceColumn: 1, type: \u0026#34;string\u0026#34;, role: \u0026#34;annotation\u0026#34; }, 2]);\r+\r+ var options = {\r+ title: \u0026#34;Density of Precious Metals, in g/cm^3\u0026#34;,\r+ width: 600,\r+ height: 400,\r+ bar: { groupWidth: \u0026#34;95%\u0026#34; },\r+ legend: { position: \u0026#34;none\u0026#34; },\r+ };\r+ var chart = new google.visualization.BarChart(document.getElementById(\u0026#34;barchart_values\u0026#34;));\r+ chart.draw(view, options);\r+ }\r }\r});\r Update the BarChart container id (in index.html our container id is mod-container)  var options = {\rtitle: \u0026#34;Density of Precious Metals, in g/cm^3\u0026#34;,\rwidth: 600,\rheight: 400,\rbar: { groupWidth: \u0026#34;95%\u0026#34; },\rlegend: { position: \u0026#34;none\u0026#34; },\r};\r- var chart = new google.visualization.BarChart(document.getElementById(\u0026#34;barchart_values\u0026#34;));\r+ var chart = new google.visualization.BarChart(document.getElementById(\u0026#34;mod-container\u0026#34;));\r chart.draw(view, options);\r Save the changes. You should see the example working in Spotfire.   Make use of async / await to get rid of extra code. Make the chart fit the screen by providing a chart area with some predefined margins.  - google.charts.load(\u0026#34;current\u0026#34;, { packages: [\u0026#34;corechart\u0026#34;] });\r- google.charts.setOnLoadCallback(drawChart);\r+ await google.charts.load(\u0026#34;current\u0026#34;, { packages: [\u0026#34;corechart\u0026#34;] });\r\r- function drawChart() {\r var data = google.visualization.arrayToDataTable([\r[\u0026#34;Element\u0026#34;, \u0026#34;Density\u0026#34;, { role: \u0026#34;style\u0026#34; }],\r[\u0026#34;Copper\u0026#34;, 8.94, \u0026#34;#b87333\u0026#34;],\r[\u0026#34;Silver\u0026#34;, 10.49, \u0026#34;silver\u0026#34;],\r[\u0026#34;Gold\u0026#34;, 19.3, \u0026#34;gold\u0026#34;],\r[\u0026#34;Platinum\u0026#34;, 21.45, \u0026#34;color: #e5e4e2\u0026#34;]\r]);\rvar view = new google.visualization.DataView(data);\rview.setColumns([0, 1, { calc: \u0026#34;stringify\u0026#34;, sourceColumn: 1, type: \u0026#34;string\u0026#34;, role: \u0026#34;annotation\u0026#34; }, 2]);\rvar options = {\rtitle: \u0026#34;Density of Precious Metals, in g/cm^3\u0026#34;,\r- width: 600,\r- height: 400,\r bar: { groupWidth: \u0026#34;95%\u0026#34; },\rlegend: { position: \u0026#34;none\u0026#34; },\r+ chartArea: { left: 85, top: 20, right: 10, bottom: 40 }\r };\rvar chart = new google.visualization.BarChart(document.getElementById(\u0026#34;mod-container\u0026#34;));\rchart.draw(view, options);\r}\r- }\r 3. Consume Spotfire data  We create hierarchies for X and Color dimensions. These are defined in the manifest and should not be confused with actual color values (css-color from now on to avoid confusion). We then use this grouped data to extract column names, values and css-colors. A google visualization expects data to be in the following format (and complains if it's not):     SeriesNames Series1 Series2 Series3     Category1 Value11 Value12 Value13   Category2 Value21 Value22 Value23     We loop over X hierarchy to create the data table.  - var data = google.visualization.arrayToDataTable([\r- [\u0026#34;Element\u0026#34;, \u0026#34;Density\u0026#34;, { role: \u0026#34;style\u0026#34; }],\r- [\u0026#34;Copper\u0026#34;, 8.94, \u0026#34;#b87333\u0026#34;],\r- [\u0026#34;Silver\u0026#34;, 10.49, \u0026#34;silver\u0026#34;],\r- [\u0026#34;Gold\u0026#34;, 19.3, \u0026#34;gold\u0026#34;],\r- [\u0026#34;Platinum\u0026#34;, 21.45, \u0026#34;color: #e5e4e2\u0026#34;]\r- ]);\r + const ALL_VALUES = \u0026#34;All Values\u0026#34;;\r+ const colorHierarchy = await dataView.getHierarchy(\u0026#34;Color\u0026#34;, true);\r+ const colorLeafNodes = await colorHierarchy.leaves();\r+ const colorDomain = colorHierarchy.isEmpty ? [ALL_VALUES] : colorLeafNodes.map(node =\u0026gt; node.fullName());\r\r- var view = new google.visualization.DataView(data);\r- view.setColumns([0, 1, { calc: \u0026#34;stringify\u0026#34;, sourceColumn: 1, type: \u0026#34;string\u0026#34;, role: \u0026#34;annotation\u0026#34; }, 2]);\r+ const xHierarchy = await dataView.getHierarchy(\u0026#34;X\u0026#34;, true);\r+ const xLeafNodes = await xHierarchy.leaves();\r+ const xDomain = xLeafNodes.map(node =\u0026gt; node.fullName());\r\r+ const dataColumns = [\u0026#34;Columns\u0026#34;];\r+ colorDomain.forEach(value =\u0026gt; dataColumns.push(value));\r\r+ const dataRows = [];\r+ xLeafNodes.forEach(\r+ (node) =\u0026gt; {\r+ const name = node.fullName();\r+ const rows = node.rows();\r+ const dataRow = [name];\r+ rows.forEach((v) =\u0026gt; dataRow.push(v.get(\u0026#34;Y\u0026#34;).getValue()));\r+ dataRows.push(dataRow);\r+ }\r+ );\r\r+ var data = google.visualization.arrayToDataTable([dataColumns, ...dataRows]);\r\rvar options = {\rtitle: \u0026#34;Density of Precious Metals, in g/cm^3\u0026#34;,\rbar: { groupWidth: \u0026#34;95%\u0026#34; },\rlegend: { position: \u0026#34;none\u0026#34; },\rchartArea: { left: 85, top: 20, right: 10, bottom: 40 }\r};\rvar chart = new google.visualization.BarChart(document.getElementById(\u0026#34;mod-container\u0026#34;));\r- chart.draw(view, options);\r+ chart.draw(data, options);\r Not all combinations of X and Color domains will be renderable by google charts out of the box, without special treament. We will guard against this with a try / catch block. The full code of the example (found in SDK) goes a little bit more in depth and covers some extra cases.  - const data = google.visualization.arrayToDataTable([dataColumns, ...dataRows]);\r+ let data;\r+ try {\r+ data = google.visualization.arrayToDataTable([dataColumns, ...dataRows]);\r+ } catch (e) {\r+ console.log(e);\r+ }\r Lastly, to apply colors to each individual bar we need to add a styling column after each value.     SeriesNames Series1 Style Series2 Style Series3 Style     Category1 Value11 CssColor11 Value12 CssColor12 Value13 CssColor13   Category2 Value21 CssColor21 Value22 CssColor22 Value23 CssColor23    const xHierarchy = await dataView.createHierarchy(rows, \u0026#34;X\u0026#34;);\rconst xDomain = xHierarchy.children.map(node =\u0026gt; node.name);\r- const dataColumns = [\u0026#34;Columns\u0026#34;];\r- colorDomain.forEach(value =\u0026gt; dataColumns.push(value));\r+ const dataColumns = [\u0026#34;Colors\u0026#34;];\r+ colorDomain.forEach(value =\u0026gt; dataColumns.push(value, { role: \u0026#34;style\u0026#34; }));\r\rconst dataRows = [];\rxLeafNodes.forEach(\r(node) =\u0026gt; {\rconst name = node.fullName();\rconst rows = node.rows();\rconst dataRow = [name];\r- rows.forEach((v) =\u0026gt; dataRow.push(v.get(\u0026#34;Y\u0026#34;).getValue()));\r+ rows.forEach((v) =\u0026gt; dataRow.push(v.get(\u0026#34;Y\u0026#34;).getValue(), v.getColor().hexCode));\r dataRows.push(dataRow);\r});\r 4. Marking / Selection  Add marking/selection logic. We listen for \u0026ldquo;select\u0026rdquo; event and extract X and Color values (not css-color!) by index in their respective domains. The Color index is halved because we have 2 times as many columns due to styling being applied (see table above). We loop over the rows array and mark the rows that match our selection. An obvious optimization would be to store the rows as a hash map to eliminate redundancy.  - var data = google.visualization.arrayToDataTable([dataColumns, ...dataRows]);\r+ const data = google.visualization.arrayToDataTable([dataColumns, ...dataRows]);\r\r- var options = {\r+ const options = {\r- title: \u0026#34;Density of Precious Metals, in g/cm^3\u0026#34;,\r+ title: \u0026#34;\u0026#34;,\r bar: { groupWidth: \u0026#34;95%\u0026#34; },\rlegend: { position: \u0026#34;none\u0026#34; },\rchartArea: { left: 85, top: 20, right: 10, bottom: 40 }\r};\r- var chart = new google.visualization.BarChart(document.getElementById(\u0026#34;mod-container\u0026#34;));\r+ const chart = new google.visualization.BarChart(document.getElementById(\u0026#34;mod-container\u0026#34;));\r chart.draw(data, options);\r+\r+ google.visualization.events.addListener(chart, \u0026#34;select\u0026#34;, () =\u0026gt; {\r+ const selection = chart.getSelection()[0];\r+\r+ if (!selection) return;\r+ const { row, column } = selection;\r+ const x = xDomain[row];\r+ const color = colorDomain[(column - 1) / 2];\r+\r+ selectRow({ x, color });\r+ });\r+\r+ function selectRow({ x, color }) {\r+ rows.forEach(row =\u0026gt; {\r+ if (row.get(\u0026#34;X\u0026#34;).getValue() == x \u0026amp;\u0026amp; row.get(\u0026#34;Color\u0026#34;).getValue() == color || color == ALL_VALUES) {\r+ row.mark();\r+ }\r+ });\r+ }\r }\r});\r To clear all marking on background click, as native Spotfire visualizations do, we listen for \u0026ldquo;click\u0026rdquo; event and check its target id.  function selectRow({ x, color }) {\rrows.forEach(row =\u0026gt; {\rif (row.get(\u0026#34;X\u0026#34;).getValue() == x \u0026amp;\u0026amp; row.get(\u0026#34;Color\u0026#34;).getValue() == color) {\rrow.mark();\r}\r});\r}\r+\r+ google.visualization.events.addListener(chart, \u0026#34;click\u0026#34;, ({ targetID, x, y }) =\u0026gt; {\r+ if (targetID == \u0026#34;chartarea\u0026#34;) {\r+ dataView.clearMarking();\r+ return;\r+ }\r+ });\r }\r});\r 5. Popout Menu  We would like to control chart's orientation (horizontal / vertical) and stacking (side-by-side / stacked). Mods api allows us to do this via a popout menu. First, we add them as properties to the manifest.  \u0026#34;icon\u0026#34;: \u0026#34;icon.svg\u0026#34;,\r\u0026#34;properties\u0026#34;: [\r{\r- \u0026#34;name\u0026#34;: \u0026#34;myProperty\u0026#34;,\r+ \u0026#34;name\u0026#34;: \u0026#34;orientation\u0026#34;,\r \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;,\r- \u0026#34;defaultValue\u0026#34;: \u0026#34;myValue\u0026#34;\r+ \u0026#34;defaultValue\u0026#34;: \u0026#34;vertical\u0026#34;\r+ },\r+ {\r+ \u0026#34;name\u0026#34;: \u0026#34;stacking\u0026#34;,\r+ \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;,\r+ \u0026#34;defaultValue\u0026#34;: \u0026#34;side-by-side\u0026#34;\r }\r],\r  Then we add the new properties to the read loop and pass them down to the render function.\n  Since the manifest has changed, we will need to reconnect the project in Spotfire for the changes to take effect (\u0026ldquo;Properties\u0026rdquo; icon (pencil or puzzle piece) on the upper right of the mod screen \u0026gt; Disconnect, followed by reconnect - see Step 1)\n  COMMENTS: Reconnection is necessary at the time of writing; it may not be necessary in future builds.\nconst readerLoop = mod.reader(\rmod.visualization.data(),\rmod.visualization.windowSize(),\r- mod.visualization.property(\u0026#34;myProperty\u0026#34;)\r+ mod.visualization.property(\u0026#34;orientation\u0026#34;),\r+ mod.visualization.property(\u0026#34;stacking\u0026#34;)\r );\r- readerLoop(async function onChange(dataView, windowSize, prop) {\r- await render(dataView, windowSize, prop);\r+ readerLoop(async function onChange(dataView, windowSize, orientation, stacking) {\r+ await render(dataView, windowSize, orientation, stacking);\r readerLoop(onChange);\r});\r/**\r* @param {Spotfire.DataView} dataView\r* @param {Spotfire.Size} windowSize\r- * @param {Spotfire.Property} prop\r+ * @param {Spotfire.Property} orientation\r+ * @param {Spotfire.Property} stacking\r */\r- async function render(dataView, windowSize, prop) {\r+ async function render(dataView, windowSize, orientation, stacking) {\r Update the background click callback to show a test popup.  google.visualization.events.addListener(chart, \u0026#34;click\u0026#34;, ({ targetID, x, y }) =\u0026gt; {\rif (targetID == \u0026#34;chartarea\u0026#34;) {\rdataView.clearMarking();\r+ showPopout({ x, y });\r return;\r}\r});\r+\r+ const { popout } = mod.controls;\r+ const { divider, heading, radioButton } = popout.components;\r+\r+ function showPopout(e) {\r+ popout.show(\r+ {\r+ x: e.x,\r+ y: e.y,\r+ autoClose: true,\r+ alignment: \u0026#34;Bottom\u0026#34;,\r+ onChange: popoutChangeHandler\r+ },\r+ popoutContent\r+ );\r+ }\r+\r+ const popoutContent = () =\u0026gt; [heading(\u0026#34;I\u0026#39;m a popout!\u0026#34;)];\r+\r+ function popoutChangeHandler() {}\r }\r});\r Add a tiny helper function to check property value. On each render we check stacking and orientation properties and update the chart configuration accordingly. Stacking is a simple boolean but orientation requires different classes for horizontal and vertical types of chart.  const data = google.visualization.arrayToDataTable([dataColumns, ...dataRows]);\r+ const is = property =\u0026gt; value =\u0026gt; property.value == value;\r+\r const options = {\rtitle: \u0026#34;\u0026#34;,\rbar: { groupWidth: \u0026#34;95%\u0026#34; },\rlegend: { position: \u0026#34;none\u0026#34; },\r- chartArea: { left: 85, top: 20, right: 10, bottom: 40 }\r+ chartArea: { left: 85, top: 20, right: 10, bottom: 40 },\r+ isStacked: is(stacking)(\u0026#34;stacked\u0026#34;),\r+ }\r };\r- const chart = new google.visualization.BarChart(document.getElementById(\u0026#34;mod-container\u0026#34;));\r+\r+ const container = document.querySelector(\u0026#34;#mod-container\u0026#34;);\r+ let chart;\r+ if (is(orientation)(\u0026#34;horizontal\u0026#34;)) {\r+ chart = new google.visualization.BarChart(container);\r+ } else {\r+ chart = new google.visualization.ColumnChart(container);\r+ }\r+\r chart.draw(data, options);\r To mimic native Spotfire bar chart behavior, we show a popout on X axis click ( Y axis for horizontal orientation).  google.visualization.events.addListener(chart, \u0026#34;click\u0026#34;, ({ targetID, x, y }) =\u0026gt; {\rif (targetID == \u0026#34;chartarea\u0026#34;) {\rdataView.clearMarking();\r- showPopout({ x, y });\r return;\r}\r+\r+ if (is(orientation)(\u0026#34;vertical\u0026#34;) \u0026amp;\u0026amp; targetID.indexOf(\u0026#34;hAxis\u0026#34;) != -1) {\r+ showPopout({ x, y });\r+ return;\r+ }\r+\r+ if (is(orientation)(\u0026#34;horizontal\u0026#34;) \u0026amp;\u0026amp; targetID.indexOf(\u0026#34;vAxis\u0026#34;) != -1) {\r+ showPopout({ x, y });\r+ return;\r+ }\r });\r Create popout content from the available components. Listen for popout changes and update property values. This will trigger a re-render and add an undoable step to the native Undo stack.  - const popoutContent = () =\u0026gt; [heading(\u0026#34;I\u0026#39;m a popout!\u0026#34;)];\r+\r+ const popoutContent = () =\u0026gt; [\r+ heading(\u0026#34;Chart Type\u0026#34;),\r+ radioButton({\r+ name: stacking.name,\r+ text: \u0026#34;Stacked bars\u0026#34;,\r+ value: \u0026#34;stacked\u0026#34;,\r+ checked: is(stacking)(\u0026#34;stacked\u0026#34;)\r+ }),\r+ radioButton({\r+ name: stacking.name,\r+ text: \u0026#34;Side-by-side bars\u0026#34;,\r+ value: \u0026#34;side-by-side\u0026#34;,\r+ checked: is(stacking)(\u0026#34;side-by-side\u0026#34;)\r+ }),\r+ divider(),\r+ heading(\u0026#34;Orientation\u0026#34;),\r+ radioButton({\r+ name: orientation.name,\r+ text: \u0026#34;Vertical\u0026#34;,\r+ value: \u0026#34;vertical\u0026#34;,\r+ checked: is(orientation)(\u0026#34;vertical\u0026#34;)\r+ }),\r+ radioButton({\r+ name: orientation.name,\r+ text: \u0026#34;Horizontal\u0026#34;,\r+ value: \u0026#34;horizontal\u0026#34;,\r+ checked: is(orientation)(\u0026#34;horizontal\u0026#34;)\r+ })\r+ ];\r\r- function popoutChangeHandler() {}\r+ /**\r+ * Popout change handler\r+ * @param {Spotfire.Property} property\r+ */\r+ function popoutChangeHandler({ name, value }) {\r+ name == orientation.name \u0026amp;\u0026amp; orientation.set(value);\r+ name == stacking.name \u0026amp;\u0026amp; stacking.set(value);\r+ }\r\r Lastly, add a pointer cursor to svg text rule in main.css to signal an interactive element.  html, body, #mod-container {\rmargin: 0;\rheight: 100%;\roverflow: hidden;\r}\r+\r+svg text {\r+ cursor: pointer;\r+}\r 6. Use Spotfire Theme and Styling  Extract style info from context Update Options object  const data = google.visualization.arrayToDataTable([dataColumns, ...dataRows]);\rconst is = property =\u0026gt; value =\u0026gt; property.value == value;\r+\r+ const context = mod.getRenderContext();\r+ const styling = context.styling;\r+ const textStyle = {\r+ fontSize: styling.scales.font.fontSize,\r+ fontName: styling.scales.font.fontFamily,\r+ color: styling.scales.font.color\r+ };\r+\r+ const baselineColor = styling.scales.line.stroke;\r+ const gridlines = { color: \u0026#34;transparent\u0026#34; };\r\rconst options = {\r- title: \u0026#34;\u0026#34;,\r- bar: { groupWidth: \u0026#34;95%\u0026#34; },\r+ bar: { groupWidth: \u0026#34;80%\u0026#34; },\r+ backgroundColor: { fill: \u0026#34;transparent\u0026#34; },\r legend: { position: \u0026#34;none\u0026#34; },\rchartArea: { left: 85, top: 20, right: 10, bottom: 40 },\risStacked: is(stacking)(\u0026#34;stacked\u0026#34;),\r+ hAxis: {\r+ textStyle,\r+ baselineColor,\r+ gridlines\r+ },\r+ vAxis: {\r+ textStyle,\r+ baselineColor,\r+ gridlines,\r+ minValue: 0\r }\r};\r In Spotfire, change Visualizations Theme to Dark (Visualizations \u0026gt; Canvas styling \u0026gt; Dark). You should see colors change according to theme.   7. Prepare for export  For export to work, we need to let Spotfire know when rendering is complete.  function popoutChangeHandler({ name, value }) {\rname == orientation.name \u0026amp;\u0026amp; orientation.set(value);\rname == stacking.name \u0026amp;\u0026amp; stacking.set(value);\r}\r+ google.visualization.events.addListener(chart, \u0026#34;ready\u0026#34;, () =\u0026gt; context.signalRenderComplete());\r  Go to File \u0026gt; Export \u0026gt; Visualization to PDF to test the export feature  ","excerpt":"A step-by-step Tutorial on using Spotfire Mods We will be using Spotfire API and googlecharts to …","ref":"https://tibcosoftware.github.io/spotfire-mods/docs/tutorials/barchart-googlechart/","title":"Barchart mod using GoogleCharts"},{"body":"Blank Mod. Perfect for starting from scratch.\nImplementation Source\n","excerpt":"Blank Mod. Perfect for starting from scratch.\nImplementation Source","ref":"https://tibcosoftware.github.io/spotfire-mods/docs/mods/mod-starter/","title":"Blank Mod"},{"body":"Developing a visualization mod Mods is a framework to create interactive visualizations in TIBCO Spotfire. Mods are based on web technologies and run in a sandboxed iframe.\nPrerequisites   A running instance of Spotfire.\nThis is needed to develop and test a mod. Development can be done against the installed client (TIBCO Spotfire Analyst) or the web client (TIBCO Spotfire Business Author).\n  A code editor.\nIt is highly recommended to use Visual Studio Code (VS Code) when developing a mod. The instructions in this document assume that VS Code is used as code editor. The mod example projects that are available for developers, include predefined settings for VS Code that enable a default build task, IntelliSense in the mod manifest, and IntelliSense in the JavaScript code.\n  Node.js installed.\nTo enable live updates when developing a mod, a set of tools based on Node.js are needed. The mod example specifies a set of development dependencies in its package.json file. These are installed when executing npm install in the same directory as the package.json file. The install script is also executed as part of the default build task in VS Code.\n  Getting started The following guide will describe the steps needed to get a mod running in development mode inside Spotfire.\n1. Create an empty visualization mod in Spotfire Open Spotfire and load some data. Go to Tools \u0026gt; Create visualization mod. This will create an empty mod. 2. Start from a mod example Click Download to access spotfire-mod-sdk.zip, where the mod example projects are provided. Extract the zip archive on your computer. The extracted spotfire-mod-sdk folder contains examples of mods using the mod API in different ways.\n js-dev-barchart\nTo get familiar with mod development, start with this example containing a simple bar chart. This is the example that will be used in the following sections of this getting started guide. js-dev-starter\nThis example can be used as a starting point for any new mod. js-dev-barchart-googlecharts\nThis example is a basic bar chart that is built using the Google Charts library. The tutorial covers the steps taken to create this bar chart from scratch. ts-dev-gauge-googlecharts\nThis is an example of a gauge visualization that is developed in TypeScript using the Google Charts library and bundled with Rollup. js-areachart-d3\nThis is a more complex example built using the D3 library, where you can see how the API can be used to take advantage of a lot of features in Spotfire.  Each example contains a README file with detailed instructions specific to the example. To use the js-dev-barchart example, open the js-dev-barchart folder in the VS Code editor: File \u0026gt; Open Folder \u0026gt; spotfire-mod-sdk\\Examples\\js-dev-barchart\n3. Start local development server Start the mod example, select Terminal \u0026gt; Run Build Task. This will install necessary development dependencies and start a local web server (the task is defined in the .vscode settings folder). The task launches a URL in your browser to the mod manifest.\n4. Connect Spotfire to the development server Switch over to Spotfire and click the Connect to project button. In the dialog that opens, click Developer server. Make sure the displayed URL matches the launched URL in your browser, and then click the Connect button. This will make Spotfire navigate to your local server and serve files from your src folder.\nIf a visualization appears, it means that Spotfire has successfully connected to the development server.\n5. Start editing your example Now switch over to VS Code to start editing the mod implementation.\nThe src folder includes HTML, CSS and JavaScript files that together form the mod implementation. It also contains a mod-manifest.json file that contains metadata about the mod. If any .html/css/js file in the src folder is changed while the development server is running, the mod will be reloaded in Spotfire\nAs an example, open the main.css file and try to change the background property of body. As soon as the css file is saved, the change will appear in Spotfire.\nFor information about how the Spotfire Mod API is accessed, open the main.js file.\nMod example folder structure The following files and folders are part of the example:\n   File Description     .vscode Settings for VS Code.   spotfire Files related to the mod API.   src Folder for the mod's source code.   development-server.js A node.js script that starts a development server.   package.json Lists the Node.js dependencies and necessary scripts.   prettier.config.js Configuration file for formatting with the tool prettier.   README.md Instructions on how to get started.   tsconfig.json TypeScript project file. It links the /spotfire/spotfire-api.dts file for IntelliSense in your code.    The mod-manifest.json All metadata that concerns the mod is defined in a file called mod-manifest.json. It is used to give the mod a name and an id, and to define axes and their placement. It is also used to list all files used by the mod. Only files listed in the ‘files’ property will be embedded by Spotfire.\nFor changes in the manifest to take effect, the manifest must be reloaded manually in Spotfire. Click the puzzle icon on the title bar of the visualization mod, and then click the Reload manifest button in the dialog that opens.\nDebugging The mod can be debugged via the Developer tools in Spotfire. These tools are the same as the tools used by Chrome. To access the Developer tools, use the following keyboard commands. In Spotfire Analyst: Ctrl+Alt+Shift+F12 In Business Author: F12\nTo find the main.js file, use the Open file command (Ctrl+P) and type the file's name. In the opened file, it is possible to set breakpoints. It is also possible to execute code in the console. More information about Chrome DevTools can be found here: https://developers.google.com/web/tools/chrome-devtools\nDevelopment in the Spotfire Web Client The required browser when developing mods against the web client is Google Chrome. This is due to how browsers behave with regards to loading http content from a https context. The development server is serving files from http://127.0.0.1:8090, which according to the W3C specification is a potentially trustworthy origin. Currently only Chrome behaves correctly with regards to this. Other browser vendors are implementing support for this and might work in the future.\nNote also that when developing a mod in the web client, it is only possible to develop via a development server. Web browsers lack the file access that is needed to read files from a mod-manifest, which means that the Browse button will not work in the web client.\nEmbedding the mod and saving to the library When the development is done, the mod is saved into the analysis by toggling back to embedded mode from the mod developer settings. Saving the mod to the Spotfire library When your mod has been embedded in the analysis, you can share the mod with others by saving it in the library.\n Click the puzzle icon in the title bar to open the dialog. Click Save to library. In the dialog that opens, navigate to the folder where you want to save the mod, and click Save. When the mod has been saved to the library, it is possible for others, connected to the same library, to use your mod in their analyses. The mod can also be pinned to the visualization flyout.  FAQ Why doesn’t live reload work? If the live reload feature does not work when using the development server, try disabling the network cache in the Chrome Developer tools. Open Chrome developer tools (Ctrl+Shift+I) and go to the Network tab, then select the Disable cache checkbox.\nHow do I use types in JavaScript files? Even though JavaScript lacks type support, it is possible to get a long way with the help of JSDoc comments. The TypeScript language service in Visual Studio Code can parse JSDoc type comments and provide IntelliSense when using the Spotfire mods API. The following snippet defines the variable dataView as an instance of Spotfire.DataView.\n/** @type {Spotfire.DataView} */\rlet dataView;\rThis can be useful in cases where the API allows generic types, such as a continuous value:\n/** @type {Spotfire.DataViewContinuousValue} */\rlet y = row.get(\u0026#34;Y\u0026#34;);\rThe same would have been done in TypeScript like this:\nlet y = row.get\u0026lt;Spotfire.DataViewContinuousValue\u0026gt;(\u0026#34;Y\u0026#34;);\rWhy don’t changes to the mod-manifest.json take effect in my analysis? The manifest is used by Spotfire to generate the underlying model for the mod. The model is generated each time the manifest is read by Spotfire. Spotfire only reads the mod manifest when the developer server is connected, disconnected or when the Reload manifest button is clicked.\nWhen the developer server is in a connected state, Spotfire points the mod iframe's source directly against the developer server. Any UI changes seen while the server is connected is not stored in the Spotfire document. To save the current state of the mod in the document, reload the mod manifest manually.\nSolution: Reload the manifest via the developer settings.\n","excerpt":"Developing a visualization mod Mods is a framework to create interactive visualizations in TIBCO …","ref":"https://tibcosoftware.github.io/spotfire-mods/docs/getting-started/","title":"Getting Started"},{"body":"This is a basic bar chart\nImplementation Source\n","excerpt":"This is a basic bar chart\nImplementation Source","ref":"https://tibcosoftware.github.io/spotfire-mods/docs/mods/bar-chart/","title":"Basic Bar Chart"},{"body":"","excerpt":"","ref":"https://tibcosoftware.github.io/spotfire-mods/docs/mods/","title":"Mods"},{"body":"This is an area chart build with D3.\nImplementation Source\n","excerpt":"This is an area chart build with D3.\nImplementation Source","ref":"https://tibcosoftware.github.io/spotfire-mods/docs/mods/area-chart/","title":"Area Chart"},{"body":"","excerpt":"","ref":"https://tibcosoftware.github.io/spotfire-mods/docs/tutorials/","title":"Tutorials"},{"body":"Data view definition A mod can create a single aggregated data view.\nThe data view is declared in the mod manifest. Its contents is specified as a number of axes. The Spotfire UI will provide controls to set actual columns/expressions used to build the data view in runtime.\nIn the simplest form, the data view definition part of a mod manifest could look like this.\n\u0026quot;dataViewDefinition\u0026quot;: { \u0026quot;axes\u0026quot;: [ {\r\u0026quot;name\u0026quot;: \u0026quot;Y\u0026quot;, \u0026quot;mode\u0026quot;: \u0026quot;continuous\u0026quot; } ] }\r This specifies that the mod will have a single continuous axis called Y, that will compute a single aggregated value, e.g. Sum(Sales). Continuous axes are typically rendered on a continuous scale.\nThe \u0026ldquo;mode\u0026rdquo; parameter can be \u0026ldquo;continuous\u0026rdquo;, \u0026ldquo;categorical\u0026rdquo; or \u0026ldquo;dual\u0026rdquo;. Dual means that the axis supports both continuous and categorical mode and can be switched between them.\nA categorical axis always splits the aggregation. The columns/expressions on the axes are used in the group by clause in the aggregated query generated for the visualization. Categorical axes are typically rendered on a categorical, or discrete, scale.\nIf we continue the example above we could add a categorical x axis to the visualization.\n\u0026quot;dataViewDefinition\u0026quot;: { \u0026quot;axes\u0026quot;: [ {\r\u0026quot;name\u0026quot;: \u0026quot;X\u0026quot;, \u0026quot;mode\u0026quot;: \u0026quot;categorical\u0026quot;, },\r{\r\u0026quot;name\u0026quot;: \u0026quot;Y\u0026quot;, \u0026quot;mode\u0026quot;: \u0026quot;continuous\u0026quot;, }\r] }\r That could be rendered like this:\nIt is always possible to add more columns to the expression on a categorical axis. This will split the aggregation further, and Spotfire usually renders this as a hierarchy.\nConsuming data from JavaScript The data view object On the javascript side data is retrieved via a DataView object. The data view has methods for retrieving data rows and information about the current axes that has data mapped to them. The methods on the data view are asynchronous so you need to await their result.\nTo retrieve the value for an axis in a data row, there is a get method that takes the axis name as argument. So to get the value for a \u0026ldquo;Y\u0026rdquo; axis you would do the following:\nlet yValue = row.get(\u0026quot;Y\u0026quot;);\r The value retrieved by the get method can be of two types depending on the mode of the axes. Either it is a DataViewContinuousValue, or it is a DataViewCategoricalValue. Both these types have a getValue function, so to list all values of a data view in csv like format, you could do this:\nasync function logDataView(dataView)\r{\r// Print axes names\rconst axes = await dataView.getAxes();\rconsole.log(axes.map(axis =\u0026gt; axis.name).join(\u0026quot;,\u0026quot;));\r// Print the row values.\rconst rows = await dataView.getAllRows();\rrows.forEach(row =\u0026gt; {\rconsole.log(axes.map(axis =\u0026gt; row.get(axis.name).getValue()).join(\u0026quot;,\u0026quot;));\r});\r}\r For the simple bar chart above showing sales per fruit, the output would be:\nX,Y\rApples,16000\rOranges,31000  DataViewContinuousValue and DataViewCategoricalValue A DataViewContinuousValue is a simple object with methods to retrieve the actual value (getValue), check it's validity (isValid), and to get a string representation of it (getFormattedValue).\nA DataViewCategoricalValue on the other hand is a bit more complicated. Since categorical axes form hierarchies, each DataViewCategoricalValue is made up from parts describing the path in the hierarchy. However, a Mod developer may choose to ignore this and treat the whole path as a single value as seen in the simple code example above. The getValue function returns a string for the whole path in this case. For the third bar chart example above, the output from the logDataView function would be:\nX,Y\rApples \u0026gt;\u0026gt; Spain,2500\rApples \u0026gt;\u0026gt; USA,13500\rOranges \u0026gt;\u0026gt; Spain,12000\rOranges \u0026gt;\u0026gt; USA,19000\r If, on the other hand, you want to access all parts of the path this can be done via the path property that returns an array of CategoricalValuePathElement objects. There is also a leafIndex property, which is the index of this value among the leaves in the hierarchy generated for the axis. This leads us to the next subject.\nHierarchies Another way to access the data in the data view is to go via hierarchies. These are represented by DataViewHierarchy objects that can be retrieved for all categorical axes. Either via the hierarchy property on the axis you get via getAxis, or via the getHierarchy function on the data view.\nThe hierarchy is tree structure with some metadata about the levels, and methods to retrieve the root of the tree (root), or the array of leaf nodes (leaves). If you care about the hierarchical structure, you would traverse from the root. If not, you would just use the leaves.\nEach node in the tree can be mapped to rows in the data view. The following sample shows show how to traverse the data view for a bar chart above from the x hierarchy:\nasync function logViaHierarchy(dataView)\r{\rconst xHierarchy = await dataView.getHierarchy(\u0026quot;X\u0026quot;, true);\rconst root = await xHierarchy.root();\rlog(root, \u0026quot;\u0026quot;);\rfunction log(node, indent) {\rconsole.log(indent + node.name);\rindent += \u0026quot; \u0026quot;;\rif(node.children) {\rnode.children.forEach(node =\u0026gt; log(node, indent));\r} else {\rnode.rows().forEach(row =\u0026gt; console.log(indent + row.get(\u0026quot;Y\u0026quot;).getValue()))\r}\r}\r}\r This would produce the following output (the root has no name):\nApples\rSpain\r2500\rUSA\r13500\rOranges\rSpain\r12000\rUSA\r19000\r Using the Spotfire color axis Mods can use the same color axis as is used by the native Spotfire visualizations. You do this by specifying a \u0026ldquo;colorAxis\u0026rdquo; entry in the data view definition section of the manifest:\n\u0026quot;dataViewDefinition\u0026quot;: {\r\u0026quot;colorAxis\u0026quot;: {\r\u0026quot;mode\u0026quot;: \u0026quot;dual\u0026quot;\r}\r The \u0026ldquo;mode\u0026rdquo; and other properties for the color axis are specified the same way as for other axes.\nOn the Javascript side you access the data values for the color axis by referring to it by its name, \u0026ldquo;Color\u0026rdquo;. The actual color computed for each row can be retrieved via the getColor function on a row. It returns an object with the color hexcode.\nSpecifying data types for continuous axis Categorical axes basically treats all data types the same way. The data is ordered and its string representation is used. For continuous axis it is possible to specify what data types should be supported. By default, they allow only numeric data. You may also choose to allow date and time data by specifying it in the manifest, in the axis section.\n\u0026quot;dataTypes\u0026quot;: {\r\u0026quot;allowDateTime\u0026quot;: true,\r\u0026quot;allowNumeric\u0026quot;: true\r}\r Using multiple measures on continuous axes By default you can only have a single measure on a continuous axis. However Spotfire allows having one axis with multiple measures on it. To turn this on, you set the \u0026ldquo;allowMultipleMeasures\u0026rdquo; flag to true for the axis in the manifest.\nWhen an axis has multiple measures, Spotfire will place each measure on its own row in the data view. This also requires the special \u0026ldquo;(Column Names)\u0026rdquo; expression, [Axis.Default.Names] in the expression language, to be used on a categorical axis in the visualization.\nUsing non-aggregating expressions on a continuous axes Mod data views are always aggregated, and by default the expressions used on them must be aggregating. To enable non-aggregating expressions, you can set the \u0026ldquo;allowNonAggregatingMeasures\u0026rdquo; flag to true for the axis in the manifest. The Spotire UIs will then add a (None) option to the aggregation methods. Note that the data view is still aggregated, so the values on the axes will be used to group by in the aggregation.\nData view sort order By default, the rows in data views are ordered by the categorical axes (or more specifically by the axes that are used to group by when performing the aggregation), in the order in which they are declared. So for instance if you declare a \u0026ldquo;Column\u0026rdquo; axis followed by a \u0026ldquo;Row\u0026rdquo; axis, the data view will first be sorted by the values on the \u0026ldquo;Column\u0026rdquo; axis and then by the \u0026ldquo;Row\u0026rdquo; axis.\nThe color axis is currently always last.\n","excerpt":"Data view definition A mod can create a single aggregated data view.\nThe data view is declared in …","ref":"https://tibcosoftware.github.io/spotfire-mods/docs/mod-data-views/","title":"Mod Data Views"},{"body":"\n","excerpt":"","ref":"https://tibcosoftware.github.io/spotfire-mods/docs/","title":"Spotfire Mods"},{"body":"\r\r#td-cover-block-0 {\rbackground-image: url(/spotfire-mods/featured-background_hu420b1a13d94c9df083ff26f5a4ec742e_328971_960x540_fill_q75_catmullrom_top.jpg); }\r@media only screen and (min-width: 1200px) {\r#td-cover-block-0 {\rbackground-image: url(/spotfire-mods/featured-background_hu420b1a13d94c9df083ff26f5a4ec742e_328971_1920x1080_fill_q75_catmullrom_top.jpg); }\r}\r\rSpotfire® Mods\rLearn More \r\rDownload \r\rCreate custom visualizations in TIBCO Spotfire\n\n\r\r\r\r\r\r\r\rSpotfire Mods by TIBCO LABS™\nSpotfire mods makes it quick and easy to create any kind of custom visualization.\n\r\r\r\r\r\rGet Started\rFollow the documentation, and start today !\nHere you find instructions on how to get started developing mods in Spotfire.\nRead more …\n\r\r\rAPI Documentation\rLorem ipsum dolor sit amet consectetur adipisicing elit. Praesentium fugiat, quos facilis possimus quidem voluptas accusamus, blanditiis officiis neque, asperiores dignissimos enim. Eaque fugiat consequuntur eveniet perferendis alias atque illo!\nRead more …\n\r\r\rTutorials\rLorem ipsum, dolor sit amet consectetur adipisicing elit. Architecto voluptas animi tempora cupiditate saepe ducimus optio quae culpa quia magni. Ratione nam iure similique. Repellat alias reprehenderit incidunt voluptate commodi.\nRead more …\n\r\n\r\r\r\r\r\r\rContact us!\rReach us for more details, or engage us today !\nRead more …\n\r\r\rContributions welcome!\rWe do a Pull Request contributions workflow on GitHub. New users are always welcome!\nRead more …\n\r\r\rFollow us on Twitter!\rFor announcement of latest features etc\u0026hellip;\nRead more …\n\r\r\r\r","excerpt":"#td-cover-block-0 {\rbackground-image: …","ref":"https://tibcosoftware.github.io/spotfire-mods/","title":"Spotfire® Mods"},{"body":"","excerpt":"","ref":"https://tibcosoftware.github.io/spotfire-mods/index.json","title":""},{"body":" \r#td-cover-block-0 {\rbackground-image: url(/spotfire-mods/about/featured-background_hu1153161cf2ebc224607c35d4b1d33ab1_341437_960x540_fill_q75_catmullrom_bottom.jpg); }\r@media only screen and (min-width: 1200px) {\r#td-cover-block-0 {\rbackground-image: url(/spotfire-mods/about/featured-background_hu1153161cf2ebc224607c35d4b1d33ab1_341437_1920x1080_fill_q75_catmullrom_bottom.jpg); }\r}\r\rSpotfire Mods by TIBCO LABS™\rThe Spotfire mod API can be used to create Mod visualizations in Spotfire. Mods are based on web technology and run in a sandboxed iframe. \r\r\r\r\r\r\rMore Details about this Initiative here TIBCO LABS™ Spotfire Mods Wiki, on \r\r\r\r\rTIBCO LABS™ is a program designed to provide customers and partners with a mechanism for actively participating in TIBCO’s history of innovation. TIBCO has always been at the forefront of innovation, and TIBCO LABS™ allows participants to share in this history by collaboratively building solutions to today’s challenging problems, previewing new capabilities, and accessing emerging technologies in areas such as blockchain, AI / ML and IoT. Through TIBCO LABS™, customers and partners can gain insight into TIBCO’s innovation activities, participate in shaping the form of these activities in the years to come, and benefit from TIBCO’s leadership position in integration and analytics. \n    \n \r\r \rBSD 3-Clause License  Copyright © 2020 TIBCO Software Inc. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n  Neither the name of TIBCO Software Inc. nor the names of any contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT OWNER AND CONTRIBUTORS \u0026ldquo;AS IS\u0026rdquo; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n \r\r ","excerpt":"#td-cover-block-0 {\rbackground-image: …","ref":"https://tibcosoftware.github.io/spotfire-mods/about/","title":"About Spotfire Mods"},{"body":"","excerpt":"","ref":"https://tibcosoftware.github.io/spotfire-mods/community/","title":"Community"},{"body":"\u0026lt; readfile file=\u0026quot;static/docs/mod-schema/index.html\u0026rdquo; html=\u0026quot;true\u0026rdquo; \u0026gt;\n","excerpt":"\u0026lt; readfile file=\u0026quot;static/docs/mod-schema/index.html\u0026rdquo; html=\u0026quot;true\u0026rdquo; \u0026gt;","ref":"https://tibcosoftware.github.io/spotfire-mods/docs/mod-schema/","title":"Mod Schema"},{"body":"","excerpt":"","ref":"https://tibcosoftware.github.io/spotfire-mods/search/","title":"Search Results"}]