<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spotfire® Mods – Tutorials</title>
    <link>https://tibcosoftware.github.io/spotfire-mods/docs/tutorials/</link>
    <description>Recent content in Tutorials on Spotfire® Mods</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 20 May 2020 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="https://tibcosoftware.github.io/spotfire-mods/docs/tutorials/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Barchart mod using GoogleCharts</title>
      <link>https://tibcosoftware.github.io/spotfire-mods/docs/tutorials/barchart-googlechart/</link>
      <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/spotfire-mods/docs/tutorials/barchart-googlechart/</guid>
      <description>
        
        
        &lt;h2 id=&#34;a-step-by-step-tutorial-on-using-spotfire-mods&#34;&gt;A step-by-step Tutorial on using Spotfire Mods&lt;/h2&gt;
&lt;p&gt;We will be using &lt;strong&gt;Spotfire API&lt;/strong&gt; and &lt;strong&gt;googlecharts&lt;/strong&gt; to create a basic bar chart.&lt;/p&gt;
&lt;p&gt;This tutorial will cover the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Initial setup&lt;/li&gt;
&lt;li&gt;Consuming and visualizing data&lt;/li&gt;
&lt;li&gt;Selection / marking&lt;/li&gt;
&lt;li&gt;Theme-ing&lt;/li&gt;
&lt;li&gt;Controlling the mod using popout menu&lt;/li&gt;
&lt;li&gt;Export to PDF&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Full code of this tutorial project (&lt;code&gt;&#39;js-dev-barchart-googlecharts&#39;&lt;/code&gt;) as well as the starter project (&lt;code&gt;&#39;js-dev-starter&#39;&lt;/code&gt;) can be found in the SDK zip.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The full version of the example (found in SDK) covers some extra cases that are outside of the scope of this tutorial.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A running instance of &lt;em&gt;Spotfire&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;A code editor. It is highly recommended to use Visual Studio Code when developing a mod. The mod example include predefined settings for VS Code that enable a default build task, intellisense in the mod manifest and intellisense in the JavaScript code.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;node.js&lt;/code&gt; installed&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;1-initial-setup&#34;&gt;1. Initial setup&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Copy &lt;code&gt;js-dev-starter&lt;/code&gt; project and rename to something relevant, like &lt;code&gt;my-barchart-mod&lt;/code&gt;. The starter project has a minimum amount of code for a working mod.&lt;/li&gt;
&lt;li&gt;Open the folder in a terminal or command line.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;npm install&lt;/code&gt; to install dependencies.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;npm run server&lt;/code&gt; to start the server. The provided server setup allows us to see live updates when developing a mod.&lt;/li&gt;
&lt;li&gt;In &lt;strong&gt;Spotfire&lt;/strong&gt; go to &lt;em&gt;Tools &amp;gt; @Create Visialization Mod&lt;/em&gt; and &lt;strong&gt;connect to the project&lt;/strong&gt; by following the on-screen steps (&lt;em&gt;Connect to Project &amp;gt; Development server &amp;gt; Connect&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;You should see some mod metadata on the screen, which means the mod is working.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./images/step1.PNG&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;2-add-google-charts-library&#34;&gt;2. Add google charts library&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;We will be using &lt;a href=&#34;https://developers.google.com/chart/interactive/docs/gallery/barchart&#34;&gt;this&lt;/a&gt; google example&lt;/li&gt;
&lt;li&gt;Add google chart loader script to &lt;em&gt;index.html&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;     &amp;lt;body&amp;gt;
         &amp;lt;div id=&amp;#34;mod-container&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;
         &amp;lt;script id=&amp;#34;spotfire-loader&amp;#34;&amp;gt;var Spotfire=function(e){&amp;#34;use strict&amp;#34;;return e.initialize=function(e){var t=&amp;#34;sfTemp&amp;#34;+1e4*Math.random()+&amp;#34;Cb&amp;#34;,a=window;a[t]=e;var r={subject:&amp;#34;GetUrl&amp;#34;,callbackId:-1,...&amp;lt;/script&amp;gt;
&lt;span style=&#34;color:#00a000&#34;&gt;+        &amp;lt;script type=&amp;#34;text/javascript&amp;#34; src=&amp;#34;https://www.gstatic.com/charts/loader.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;         &amp;lt;script src=&amp;#34;main.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
     &amp;lt;/body&amp;gt;
 &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Paste full example code into &lt;em&gt;main.js&lt;/em&gt; inside &lt;strong&gt;render&lt;/strong&gt; function&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;     async function render(dataView, windowSize, prop) {

         /**
          * Get rows from dataView
          */
         const rows = await dataView.getAllRows();

&lt;span style=&#34;color:#a40000&#34;&gt;-        /**
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-         * Print out to document
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-         */
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-        const container = document.querySelector(&amp;#34;#mod-container&amp;#34;);
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-        container.innerHTML += `windowSize: ${windowSize.width}x${windowSize.height}&amp;lt;br/&amp;gt;`;
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-        container.innerHTML += `should render: ${rows.length} rows&amp;lt;br/&amp;gt;`;
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-        container.innerHTML += `${prop.name}: ${prop.value}`;
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        google.charts.load(&amp;#34;current&amp;#34;, { packages: [&amp;#34;corechart&amp;#34;] });
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        google.charts.setOnLoadCallback(drawChart);
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        function drawChart() {
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            var data = google.visualization.arrayToDataTable([
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                [&amp;#34;Element&amp;#34;, &amp;#34;Density&amp;#34;, { role: &amp;#34;style&amp;#34; }],
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                [&amp;#34;Copper&amp;#34;, 8.94, &amp;#34;#b87333&amp;#34;],
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                [&amp;#34;Silver&amp;#34;, 10.49, &amp;#34;silver&amp;#34;],
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                [&amp;#34;Gold&amp;#34;, 19.3, &amp;#34;gold&amp;#34;],
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                [&amp;#34;Platinum&amp;#34;, 21.45, &amp;#34;color: #e5e4e2&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            ]);
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            var view = new google.visualization.DataView(data);
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            view.setColumns([0, 1, { calc: &amp;#34;stringify&amp;#34;, sourceColumn: 1, type: &amp;#34;string&amp;#34;, role: &amp;#34;annotation&amp;#34; }, 2]);
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            var options = {
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                title: &amp;#34;Density of Precious Metals, in g/cm^3&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                width: 600,
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                height: 400,
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                bar: { groupWidth: &amp;#34;95%&amp;#34; },
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                legend: { position: &amp;#34;none&amp;#34; },
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            };
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            var chart = new google.visualization.BarChart(document.getElementById(&amp;#34;barchart_values&amp;#34;));
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            chart.draw(view, options);
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        }
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;     }
 });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Update the BarChart container id (in  &lt;em&gt;index.html&lt;/em&gt;  our container id is &lt;em&gt;mod-container&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;     
            var options = {
               title: &amp;#34;Density of Precious Metals, in g/cm^3&amp;#34;,
               width: 600,
               height: 400,
               bar: { groupWidth: &amp;#34;95%&amp;#34; },
               legend: { position: &amp;#34;none&amp;#34; },
           };
&lt;span style=&#34;color:#a40000&#34;&gt;-            var chart = new google.visualization.BarChart(document.getElementById(&amp;#34;barchart_values&amp;#34;));
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            var chart = new google.visualization.BarChart(document.getElementById(&amp;#34;mod-container&amp;#34;));
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;            chart.draw(view, options);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Save the changes. You should see the example working in Spotfire.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./images/step2.PNG&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make use of &lt;em&gt;async / await&lt;/em&gt; to get rid of extra code.&lt;/li&gt;
&lt;li&gt;Make the chart fit the screen by providing a chart area with some predefined margins.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-       google.charts.load(&amp;#34;current&amp;#34;, { packages: [&amp;#34;corechart&amp;#34;] });
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-       google.charts.setOnLoadCallback(drawChart);
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+       await google.charts.load(&amp;#34;current&amp;#34;, { packages: [&amp;#34;corechart&amp;#34;] });
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#a40000&#34;&gt;-       function drawChart() {
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;          var data = google.visualization.arrayToDataTable([
              [&amp;#34;Element&amp;#34;, &amp;#34;Density&amp;#34;, { role: &amp;#34;style&amp;#34; }],
              [&amp;#34;Copper&amp;#34;, 8.94, &amp;#34;#b87333&amp;#34;],
              [&amp;#34;Silver&amp;#34;, 10.49, &amp;#34;silver&amp;#34;],
              [&amp;#34;Gold&amp;#34;, 19.3, &amp;#34;gold&amp;#34;],
              [&amp;#34;Platinum&amp;#34;, 21.45, &amp;#34;color: #e5e4e2&amp;#34;]
          ]);

          var view = new google.visualization.DataView(data);
          view.setColumns([0, 1, { calc: &amp;#34;stringify&amp;#34;, sourceColumn: 1, type: &amp;#34;string&amp;#34;, role: &amp;#34;annotation&amp;#34; }, 2]);

          var options = {
              title: &amp;#34;Density of Precious Metals, in g/cm^3&amp;#34;,
&lt;span style=&#34;color:#a40000&#34;&gt;-             width: 600,
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-             height: 400,
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;              bar: { groupWidth: &amp;#34;95%&amp;#34; },
              legend: { position: &amp;#34;none&amp;#34; },
&lt;span style=&#34;color:#00a000&#34;&gt;+             chartArea: { left: 85, top: 20, right: 10, bottom: 40 }
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;          };
          var chart = new google.visualization.BarChart(document.getElementById(&amp;#34;mod-container&amp;#34;));
          chart.draw(view, options);
        }
&lt;span style=&#34;color:#a40000&#34;&gt;-     }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h3 id=&#34;3-consume-spotfire-data&#34;&gt;3. Consume Spotfire data&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;We create hierarchies for X and Color dimensions. These are defined in the manifest and should not be confused with actual color values (&lt;strong&gt;css-color&lt;/strong&gt; from now on to avoid confusion).&lt;/li&gt;
&lt;li&gt;We then use this grouped data to extract column names, values and css-colors.&lt;/li&gt;
&lt;li&gt;A google visualization expects data to be in the following format (and complains if it&#39;s not):&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;SeriesNames&lt;/th&gt;
&lt;th&gt;Series1&lt;/th&gt;
&lt;th&gt;Series2&lt;/th&gt;
&lt;th&gt;Series3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Category1&lt;/td&gt;
&lt;td&gt;Value11&lt;/td&gt;
&lt;td&gt;Value12&lt;/td&gt;
&lt;td&gt;Value13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Category2&lt;/td&gt;
&lt;td&gt;Value21&lt;/td&gt;
&lt;td&gt;Value22&lt;/td&gt;
&lt;td&gt;Value23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;We loop over X hierarchy to create the data table.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-        var data = google.visualization.arrayToDataTable([
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-            [&amp;#34;Element&amp;#34;, &amp;#34;Density&amp;#34;, { role: &amp;#34;style&amp;#34; }],
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-            [&amp;#34;Copper&amp;#34;, 8.94, &amp;#34;#b87333&amp;#34;],
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-            [&amp;#34;Silver&amp;#34;, 10.49, &amp;#34;silver&amp;#34;],
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-            [&amp;#34;Gold&amp;#34;, 19.3, &amp;#34;gold&amp;#34;],
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-            [&amp;#34;Platinum&amp;#34;, 21.45, &amp;#34;color: #e5e4e2&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-        ]);
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;        
&lt;span style=&#34;color:#00a000&#34;&gt;+        const ALL_VALUES = &amp;#34;All Values&amp;#34;;
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        const colorHierarchy = await dataView.getHierarchy(&amp;#34;Color&amp;#34;, true);
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        const colorLeafNodes = await colorHierarchy.leaves();
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        const colorDomain = colorHierarchy.isEmpty ? [ALL_VALUES] : colorLeafNodes.map(node =&amp;gt; node.fullName());
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color:#a40000&#34;&gt;-        var view = new google.visualization.DataView(data);
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-        view.setColumns([0, 1, { calc: &amp;#34;stringify&amp;#34;, sourceColumn: 1, type: &amp;#34;string&amp;#34;, role: &amp;#34;annotation&amp;#34; }, 2]);
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        const xHierarchy = await dataView.getHierarchy(&amp;#34;X&amp;#34;, true);
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        const xLeafNodes = await xHierarchy.leaves();
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        const xDomain = xLeafNodes.map(node =&amp;gt; node.fullName());
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#00a000&#34;&gt;+        const dataColumns = [&amp;#34;Columns&amp;#34;];
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        colorDomain.forEach(value =&amp;gt; dataColumns.push(value));
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#00a000&#34;&gt;+         const dataRows = [];
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        xLeafNodes.forEach(
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            (node) =&amp;gt; {
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                const name = node.fullName();
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                const rows = node.rows();
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                const dataRow = [name];
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                rows.forEach((v) =&amp;gt; dataRow.push(v.get(&amp;#34;Y&amp;#34;).getValue()));
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                dataRows.push(dataRow);
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            }
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        );
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#00a000&#34;&gt;+        var data = google.visualization.arrayToDataTable([dataColumns, ...dataRows]);
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;
         var options = {
             title: &amp;#34;Density of Precious Metals, in g/cm^3&amp;#34;,
             bar: { groupWidth: &amp;#34;95%&amp;#34; },
             legend: { position: &amp;#34;none&amp;#34; },
             chartArea: { left: 85, top: 20, right: 10, bottom: 40 }
         };
         var chart = new google.visualization.BarChart(document.getElementById(&amp;#34;mod-container&amp;#34;));
&lt;span style=&#34;color:#a40000&#34;&gt;-        chart.draw(view, options);
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        chart.draw(data, options);
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;./images/step3.PNG&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Not all combinations of &lt;em&gt;X&lt;/em&gt; and &lt;em&gt;Color&lt;/em&gt; domains will be renderable by google charts out of the box, without special treament. We will guard against this with a &lt;strong&gt;try / catch&lt;/strong&gt; block.&lt;/li&gt;
&lt;li&gt;The full code of the example (found in SDK) goes a little bit more in depth and covers some extra cases.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-        const data = google.visualization.arrayToDataTable([dataColumns, ...dataRows]);
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        let data;
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        try {
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            data = google.visualization.arrayToDataTable([dataColumns, ...dataRows]);
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        } catch (e) {
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            console.log(e);
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Lastly, to apply colors to each individual bar we need to add a styling column after each value.&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;SeriesNames&lt;/th&gt;
&lt;th&gt;Series1&lt;/th&gt;
&lt;th&gt;Style&lt;/th&gt;
&lt;th&gt;Series2&lt;/th&gt;
&lt;th&gt;Style&lt;/th&gt;
&lt;th&gt;Series3&lt;/th&gt;
&lt;th&gt;Style&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Category1&lt;/td&gt;
&lt;td&gt;Value11&lt;/td&gt;
&lt;td&gt;CssColor11&lt;/td&gt;
&lt;td&gt;Value12&lt;/td&gt;
&lt;td&gt;CssColor12&lt;/td&gt;
&lt;td&gt;Value13&lt;/td&gt;
&lt;td&gt;CssColor13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Category2&lt;/td&gt;
&lt;td&gt;Value21&lt;/td&gt;
&lt;td&gt;CssColor21&lt;/td&gt;
&lt;td&gt;Value22&lt;/td&gt;
&lt;td&gt;CssColor22&lt;/td&gt;
&lt;td&gt;Value23&lt;/td&gt;
&lt;td&gt;CssColor23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;         const xHierarchy = await dataView.createHierarchy(rows, &amp;#34;X&amp;#34;);
         const xDomain = xHierarchy.children.map(node =&amp;gt; node.name);

&lt;span style=&#34;color:#a40000&#34;&gt;-        const dataColumns = [&amp;#34;Columns&amp;#34;];
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-        colorDomain.forEach(value =&amp;gt; dataColumns.push(value));
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        const dataColumns = [&amp;#34;Colors&amp;#34;];
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        colorDomain.forEach(value =&amp;gt; dataColumns.push(value, { role: &amp;#34;style&amp;#34; }));
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;
         const dataRows = [];
         xLeafNodes.forEach(
             (node) =&amp;gt; {
                const name = node.fullName();
                const rows = node.rows();
                const dataRow = [name];
&lt;span style=&#34;color:#a40000&#34;&gt;-               rows.forEach((v) =&amp;gt; dataRow.push(v.get(&amp;#34;Y&amp;#34;).getValue()));
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+               rows.forEach((v) =&amp;gt; dataRow.push(v.get(&amp;#34;Y&amp;#34;).getValue(), v.getColor().hexCode));
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;             dataRows.push(dataRow);
         });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;./images/step3-1.PNG&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;4-marking--selection&#34;&gt;4. Marking / Selection&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Add marking/selection logic. We listen for &amp;ldquo;select&amp;rdquo; event and extract X and Color values (&lt;em&gt;not css-color!&lt;/em&gt;) by index in their respective domains. The Color index is halved because we have 2 times as many columns due to styling being applied (see table above).&lt;/li&gt;
&lt;li&gt;We loop over the rows array and mark the rows that match our selection. An obvious optimization would be to store the rows as a hash map to eliminate redundancy.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-        var data = google.visualization.arrayToDataTable([dataColumns, ...dataRows]);
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        const data = google.visualization.arrayToDataTable([dataColumns, ...dataRows]);
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#a40000&#34;&gt;-        var options = {
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        const options = {
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-            title: &amp;#34;Density of Precious Metals, in g/cm^3&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            title: &amp;#34;&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;             bar: { groupWidth: &amp;#34;95%&amp;#34; },
             legend: { position: &amp;#34;none&amp;#34; },
             chartArea: { left: 85, top: 20, right: 10, bottom: 40 }
         };
&lt;span style=&#34;color:#a40000&#34;&gt;-        var chart = new google.visualization.BarChart(document.getElementById(&amp;#34;mod-container&amp;#34;));
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        const chart = new google.visualization.BarChart(document.getElementById(&amp;#34;mod-container&amp;#34;));
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;         chart.draw(data, options);
&lt;span style=&#34;color:#00a000&#34;&gt;+
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        google.visualization.events.addListener(chart, &amp;#34;select&amp;#34;, () =&amp;gt; {
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            const selection = chart.getSelection()[0];
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            if (!selection) return;
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            const { row, column } = selection;
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            const x = xDomain[row];
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            const color = colorDomain[(column - 1) / 2];
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            selectRow({ x, color });
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        });
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        function selectRow({ x, color }) {
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            rows.forEach(row =&amp;gt; {
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                if (row.get(&amp;#34;X&amp;#34;).getValue() == x &amp;amp;&amp;amp; row.get(&amp;#34;Color&amp;#34;).getValue() == color || color == ALL_VALUES) {
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                    row.mark();
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                }
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            });
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        }
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;     }
 });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;./images/step4.PNG&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To clear all marking on background click, as native Spotfire visualizations do, we listen for &amp;ldquo;click&amp;rdquo; event and check its target id.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;        function selectRow({ x, color }) {
            rows.forEach(row =&amp;gt; {
                if (row.get(&amp;#34;X&amp;#34;).getValue() == x &amp;amp;&amp;amp; row.get(&amp;#34;Color&amp;#34;).getValue() == color) {
                    row.mark();
                }
            });
        }
&lt;span style=&#34;color:#00a000&#34;&gt;+
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        google.visualization.events.addListener(chart, &amp;#34;click&amp;#34;, ({ targetID, x, y }) =&amp;gt; {
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            if (targetID == &amp;#34;chartarea&amp;#34;) {
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                dataView.clearMarking();
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                return;
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            }
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        });
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;     }
 });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h3 id=&#34;5-popout-menu&#34;&gt;5. Popout Menu&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;We would like to control chart&#39;s &lt;em&gt;orientation (horizontal / vertical)&lt;/em&gt; and &lt;em&gt;stacking (side-by-side / stacked)&lt;/em&gt;. Mods api allows us to do this via a popout menu.&lt;/li&gt;
&lt;li&gt;First, we add them as properties to the manifest.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;     &amp;#34;icon&amp;#34;: &amp;#34;icon.svg&amp;#34;,
     &amp;#34;properties&amp;#34;: [
         {
&lt;span style=&#34;color:#a40000&#34;&gt;-            &amp;#34;name&amp;#34;: &amp;#34;myProperty&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            &amp;#34;name&amp;#34;: &amp;#34;orientation&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;             &amp;#34;type&amp;#34;: &amp;#34;string&amp;#34;,
&lt;span style=&#34;color:#a40000&#34;&gt;-            &amp;#34;defaultValue&amp;#34;: &amp;#34;myValue&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            &amp;#34;defaultValue&amp;#34;: &amp;#34;vertical&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        },
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        {
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            &amp;#34;name&amp;#34;: &amp;#34;stacking&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            &amp;#34;type&amp;#34;: &amp;#34;string&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            &amp;#34;defaultValue&amp;#34;: &amp;#34;side-by-side&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;         }
     ],
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Then we add the new properties to the read loop and pass them down to the render function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Since the manifest has changed, we will need to reconnect the project in Spotfire for the changes to take effect&lt;/strong&gt; (&lt;em&gt;&amp;ldquo;Properties&amp;rdquo; icon (&lt;code&gt;pencil&lt;/code&gt; or &lt;code&gt;puzzle piece&lt;/code&gt;) on the upper right of the mod screen &amp;gt; Disconnect&lt;/em&gt;, followed by reconnect - see &lt;a href=&#34;#1-initial-setup&#34;&gt;Step 1&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;COMMENTS: 
Reconnection is necessary at the time of writing; it may not be necessary in future builds.&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt; const readerLoop = mod.reader(
         mod.visualization.data(),
         mod.visualization.windowSize(),
&lt;span style=&#34;color:#a40000&#34;&gt;-        mod.visualization.property(&amp;#34;myProperty&amp;#34;)
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        mod.visualization.property(&amp;#34;orientation&amp;#34;),
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        mod.visualization.property(&amp;#34;stacking&amp;#34;)
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;     );

&lt;span style=&#34;color:#a40000&#34;&gt;-    readerLoop(async function onChange(dataView, windowSize, prop) {
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-        await render(dataView, windowSize, prop);
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+    readerLoop(async function onChange(dataView, windowSize, orientation, stacking) {
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        await render(dataView, windowSize, orientation, stacking);
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;         readerLoop(onChange);
     });

     /**
      * @param {Spotfire.DataView} dataView
      * @param {Spotfire.Size} windowSize
&lt;span style=&#34;color:#a40000&#34;&gt;-     * @param {Spotfire.Property} prop
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+     * @param {Spotfire.Property} orientation
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+     * @param {Spotfire.Property} stacking
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;      */
&lt;span style=&#34;color:#a40000&#34;&gt;-    async function render(dataView, windowSize, prop) {
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+    async function render(dataView, windowSize, orientation, stacking) {
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Update the background click callback to show a test popup.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;         google.visualization.events.addListener(chart, &amp;#34;click&amp;#34;, ({ targetID, x, y }) =&amp;gt; {
             if (targetID == &amp;#34;chartarea&amp;#34;) {
                 dataView.clearMarking();
&lt;span style=&#34;color:#00a000&#34;&gt;+                showPopout({ x, y });
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;                 return;
             }
         });
&lt;span style=&#34;color:#00a000&#34;&gt;+
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        const { popout } = mod.controls;
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        const { divider, heading, radioButton } = popout.components;
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        function showPopout(e) {
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            popout.show(
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                {
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                    x: e.x,
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                    y: e.y,
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                    autoClose: true,
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                    alignment: &amp;#34;Bottom&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                    onChange: popoutChangeHandler
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                },
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                popoutContent
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            );
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        }
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        const popoutContent = () =&amp;gt; [heading(&amp;#34;I&amp;#39;m a popout!&amp;#34;)];
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        function popoutChangeHandler() {}
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;     }
 });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;./images/step5.PNG&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add a tiny helper function to check property value.&lt;/li&gt;
&lt;li&gt;On each render we check &lt;strong&gt;stacking&lt;/strong&gt; and &lt;strong&gt;orientation&lt;/strong&gt; properties and update the chart configuration accordingly. Stacking is a simple boolean but orientation requires different classes for horizontal and vertical types of chart.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;         const data = google.visualization.arrayToDataTable([dataColumns, ...dataRows]);

&lt;span style=&#34;color:#00a000&#34;&gt;+        const is = property =&amp;gt; value =&amp;gt; property.value == value;
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;         const options = {
             title: &amp;#34;&amp;#34;,
             bar: { groupWidth: &amp;#34;95%&amp;#34; },
             legend: { position: &amp;#34;none&amp;#34; },
&lt;span style=&#34;color:#a40000&#34;&gt;-            chartArea: { left: 85, top: 20, right: 10, bottom: 40 }
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            chartArea: { left: 85, top: 20, right: 10, bottom: 40 },
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            isStacked: is(stacking)(&amp;#34;stacked&amp;#34;),
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            }
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;         };
&lt;span style=&#34;color:#a40000&#34;&gt;-        const chart = new google.visualization.BarChart(document.getElementById(&amp;#34;mod-container&amp;#34;));
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        const container = document.querySelector(&amp;#34;#mod-container&amp;#34;);
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        let chart;
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        if (is(orientation)(&amp;#34;horizontal&amp;#34;)) {
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            chart = new google.visualization.BarChart(container);
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        } else {
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            chart = new google.visualization.ColumnChart(container);
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        }
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;         chart.draw(data, options);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;To mimic native Spotfire bar chart behavior, we show a popout on X axis click ( Y axis for horizontal orientation).&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;         google.visualization.events.addListener(chart, &amp;#34;click&amp;#34;, ({ targetID, x, y }) =&amp;gt; {
             if (targetID == &amp;#34;chartarea&amp;#34;) {
                 dataView.clearMarking();
&lt;span style=&#34;color:#a40000&#34;&gt;-                showPopout({ x, y });
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;                 return;
             }
&lt;span style=&#34;color:#00a000&#34;&gt;+
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            if (is(orientation)(&amp;#34;vertical&amp;#34;) &amp;amp;&amp;amp; targetID.indexOf(&amp;#34;hAxis&amp;#34;) != -1) {
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                showPopout({ x, y });
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                return;
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            }
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            if (is(orientation)(&amp;#34;horizontal&amp;#34;) &amp;amp;&amp;amp; targetID.indexOf(&amp;#34;vAxis&amp;#34;) != -1) {
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                showPopout({ x, y });
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                return;
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            }
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;         });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Create popout content from the available components.&lt;/li&gt;
&lt;li&gt;Listen for popout changes and update property values. This will trigger a re-render and add an undoable step to the native &lt;em&gt;Undo stack&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-        const popoutContent = () =&amp;gt; [heading(&amp;#34;I&amp;#39;m a popout!&amp;#34;)];
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        const popoutContent = () =&amp;gt; [
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            heading(&amp;#34;Chart Type&amp;#34;),
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            radioButton({
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                name: stacking.name,
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                text: &amp;#34;Stacked bars&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                value: &amp;#34;stacked&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                checked: is(stacking)(&amp;#34;stacked&amp;#34;)
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            }),
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            radioButton({
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                name: stacking.name,
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                text: &amp;#34;Side-by-side bars&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                value: &amp;#34;side-by-side&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                checked: is(stacking)(&amp;#34;side-by-side&amp;#34;)
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            }),
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            divider(),
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            heading(&amp;#34;Orientation&amp;#34;),
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            radioButton({
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                name: orientation.name,
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                text: &amp;#34;Vertical&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                value: &amp;#34;vertical&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                checked: is(orientation)(&amp;#34;vertical&amp;#34;)
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            }),
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            radioButton({
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                name: orientation.name,
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                text: &amp;#34;Horizontal&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                value: &amp;#34;horizontal&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                checked: is(orientation)(&amp;#34;horizontal&amp;#34;)
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            })
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        ];
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color:#a40000&#34;&gt;-        function popoutChangeHandler() {}
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        /**
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+         * Popout change handler
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+         * @param {Spotfire.Property} property
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+         */
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        function popoutChangeHandler({ name, value }) {
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            name == orientation.name &amp;amp;&amp;amp; orientation.set(value);
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            name == stacking.name &amp;amp;&amp;amp; stacking.set(value);
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        }
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Lastly, add a pointer cursor to &lt;code&gt;svg text&lt;/code&gt; rule in &lt;em&gt;main.css&lt;/em&gt; to signal an interactive element.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;html, body, #mod-container {
     margin: 0;
     height: 100%;
     overflow: hidden;
}
&lt;span style=&#34;color:#00a000&#34;&gt;+
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+svg text {
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+    cursor: pointer;
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;./images/step5-1.PNG&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;6-use-spotfire-theme-and-styling&#34;&gt;6. Use Spotfire Theme and Styling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Extract style info from context&lt;/li&gt;
&lt;li&gt;Update Options object&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;         const data = google.visualization.arrayToDataTable([dataColumns, ...dataRows]);

         const is = property =&amp;gt; value =&amp;gt; property.value == value;
&lt;span style=&#34;color:#00a000&#34;&gt;+
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        const context = mod.getRenderContext();
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        const styling = context.styling;
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        const textStyle = {
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            fontSize: styling.scales.font.fontSize,
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            fontName: styling.scales.font.fontFamily,
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            color: styling.scales.font.color
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        };
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        const baselineColor = styling.scales.line.stroke;
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        const gridlines = { color: &amp;#34;transparent&amp;#34; };
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;
         const options = {
&lt;span style=&#34;color:#a40000&#34;&gt;-            title: &amp;#34;&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-            bar: { groupWidth: &amp;#34;95%&amp;#34; },
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            bar: { groupWidth: &amp;#34;80%&amp;#34; },
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            backgroundColor: { fill: &amp;#34;transparent&amp;#34; },
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;             legend: { position: &amp;#34;none&amp;#34; },
             chartArea: { left: 85, top: 20, right: 10, bottom: 40 },
             isStacked: is(stacking)(&amp;#34;stacked&amp;#34;),
&lt;span style=&#34;color:#00a000&#34;&gt;+            hAxis: {
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                textStyle,
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                baselineColor,
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                gridlines
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            },
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+            vAxis: {
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                textStyle,
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                baselineColor,
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                gridlines,
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+                minValue: 0
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;             }
         };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;In Spotfire, change &lt;em&gt;Visualizations Theme&lt;/em&gt; to &lt;strong&gt;Dark&lt;/strong&gt; (&lt;em&gt;Visualizations &amp;gt; Canvas styling &amp;gt; Dark&lt;/em&gt;). You should see colors change according to theme.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./images/step6.PNG&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;7-prepare-for-export&#34;&gt;7. Prepare for export&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;For export to work, we need to let Spotfire know when rendering is complete.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;        function popoutChangeHandler({ name, value }) {
            name == orientation.name &amp;amp;&amp;amp; orientation.set(value);
            name == stacking.name &amp;amp;&amp;amp; stacking.set(value);
        }

&lt;span style=&#34;color:#00a000&#34;&gt;+       google.visualization.events.addListener(chart, &amp;#34;ready&amp;#34;, () =&amp;gt; context.signalRenderComplete());
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;heading&#34;&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Go to &lt;em&gt;File &amp;gt; Export &amp;gt; Visualization to PDF&lt;/em&gt; to test the export feature&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./images/step7.PNG&#34; alt=&#34;&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
